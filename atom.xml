<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jinjupeng.github.io</id>
    <title>Gridea</title>
    <updated>2021-12-04T06:59:05.004Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jinjupeng.github.io"/>
    <link rel="self" href="https://jinjupeng.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jinjupeng.github.io/images/avatar.png</logo>
    <icon>https://jinjupeng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Add custom configuration file using options and configuration objects]]></title>
        <id>https://jinjupeng.github.io/post/add-custom-configuration-file-using-options-and-configuration-objects/</id>
        <link href="https://jinjupeng.github.io/post/add-custom-configuration-file-using-options-and-configuration-objects/">
        </link>
        <updated>2021-12-04T06:45:29.000Z</updated>
        <content type="html"><![CDATA[<p>It can be usefull to have multiple configuration files, and it follows some develoment best practices like the Interface Segregation Principle or the Separation of Concerns. Moreover, it allows you to have the behavior you want on each configuration file.</p>
<p>It's very simple and asy to do this using options and configuration objects.</p>
<p>The first step is to add a file in your project, here customSettings.json, with the content :</p>
<pre><code>{
    &quot;CustomSection1&quot;: {
        &quot;Hi&quot;: &quot;Hi!&quot;,
        &quot;Hello&quot;: &quot;Hello!&quot;
    },
    &quot;CustomSection2&quot;: {
        &quot;Bye&quot;: &quot;Bye!&quot;
     }
}
</code></pre>
<p>Create the model of the configuration settings you want to add :</p>
<pre><code>namespace WebApplication1.Models.CustomSettings
{
    public class CustomSection1
    {
        public string Hi { get; set; }
        public string Hello { get; set; }
    }

    public class CustomSection2
    {
        public string Bye { get; set; }
    }
}
</code></pre>
<p>Then, use the configuration provider you want (the JSON one here), and add your class to the service container and bound to configuration :</p>
<pre><code>public class Startup
{
    public Startup(IHostingEnvironment env)
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(env.ContentRootPath)
            .AddJsonFile(&quot;appsettings.json&quot;, optional: true, reloadOnChange: true)
            .AddJsonFile($&quot;appsettings.{env.EnvironmentName}.json&quot;, optional: true)
            .AddJsonFile($&quot;customSettings.json&quot;, optional: true, reloadOnChange: true)
            .AddEnvironmentVariables();

        if (env.IsDevelopment())
        {
            // This will push telemetry data through Application Insights pipeline faster, allowing you to view results immediately.
            builder.AddApplicationInsightsSettings(developerMode: true);
        }
        Configuration = builder.Build();
    }

    public IConfigurationRoot Configuration { get; }

    // This method gets called by the runtime. Use this method to add services to the container.
    public void ConfigureServices(IServiceCollection services)
    {
        // Add framework services.
        services.AddApplicationInsightsTelemetry(Configuration);

        services.Configure&lt;CustomSection1&gt;(options =&gt; Configuration.GetSection(&quot;CustomSection1&quot;).Bind(options));
        services.Configure&lt;CustomSection2&gt;(options =&gt; Configuration.GetSection(&quot;CustomSection2&quot;).Bind(options));

        services.AddMvc();
    }
</code></pre>
<p>Work is done ! You can now access your settings from your controllers using Dependency Injection on IOptions :</p>
<pre><code>public class HomeController : Controller
{
    private readonly CustomSection1 _customSection1;

    private readonly CustomSection2 _customSection2;

    public HomeController(
        IOptions&lt;CustomSection1&gt; customSection1
        , IOptions&lt;CustomSection2&gt; customSection2)
    {
        _customSection1 = customSection1.Value;
        _customSection2 = customSection2.Value;
    }
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://jinjupeng.github.io/post/hello-gridea/</id>
        <link href="https://jinjupeng.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>